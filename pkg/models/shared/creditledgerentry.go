// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// CreditLedgerEntryCreditBlock - Credit block that the entry affected
type CreditLedgerEntryCreditBlock struct {
	// Complete timestamp with date and time for when this block expires
	ExpiryDate string `json:"expiry_date"`
	ID         string `json:"id"`
	// How much, in USD, a customer paid for a single credit in this block
	PerUnitCostBasis string `json:"per_unit_cost_basis"`
}

type CreditLedgerEntryCustomer struct {
	ExternalCustomerID string `json:"external_customer_id"`
	ID                 string `json:"id"`
}

// CreditLedgerEntryEntryStatusEnum - Committed entries are older than the ingestion grace period, and cannot change. Pending entries are newer than the grace period and are subject to updates
type CreditLedgerEntryEntryStatusEnum string

const (
	CreditLedgerEntryEntryStatusEnumCommitted CreditLedgerEntryEntryStatusEnum = "committed"
	CreditLedgerEntryEntryStatusEnumPending   CreditLedgerEntryEntryStatusEnum = "pending"
)

func (e CreditLedgerEntryEntryStatusEnum) ToPointer() *CreditLedgerEntryEntryStatusEnum {
	return &e
}

func (e *CreditLedgerEntryEntryStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "committed":
		fallthrough
	case "pending":
		*e = CreditLedgerEntryEntryStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreditLedgerEntryEntryStatusEnum: %s", s)
	}
}

type CreditLedgerEntryEntryTypeEnum string

const (
	CreditLedgerEntryEntryTypeEnumIncrement         CreditLedgerEntryEntryTypeEnum = "increment"
	CreditLedgerEntryEntryTypeEnumDecrement         CreditLedgerEntryEntryTypeEnum = "decrement"
	CreditLedgerEntryEntryTypeEnumExpirationChange  CreditLedgerEntryEntryTypeEnum = "expiration_change"
	CreditLedgerEntryEntryTypeEnumCreditBlockExpiry CreditLedgerEntryEntryTypeEnum = "credit_block_expiry"
)

func (e CreditLedgerEntryEntryTypeEnum) ToPointer() *CreditLedgerEntryEntryTypeEnum {
	return &e
}

func (e *CreditLedgerEntryEntryTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "increment":
		fallthrough
	case "decrement":
		fallthrough
	case "expiration_change":
		fallthrough
	case "credit_block_expiry":
		*e = CreditLedgerEntryEntryTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreditLedgerEntryEntryTypeEnum: %s", s)
	}
}

// CreditLedgerEntry - A credit ledger entry is a single entry in the customer balance ledger. More details about working with real-time balances are [here](../docs/Credits.md).
//
// To support late and out-of-order event reporting, ledger entries are marked as either __committed_ or _pending_. Committed entries are finalized and will not change. Pending entries can be updated up until the event reporting grace period.
type CreditLedgerEntry struct {
	// Number of credits that were impacted
	Amount    float64   `json:"amount"`
	CreatedAt time.Time `json:"created_at"`
	// Credit block that the entry affected
	CreditBlock CreditLedgerEntryCreditBlock `json:"credit_block"`
	Customer    CreditLedgerEntryCustomer    `json:"customer"`
	// Optional metadata that can be specified when adding ledger results via the API
	Description   string  `json:"description"`
	EndingBalance float64 `json:"ending_balance"`
	// Committed entries are older than the ingestion grace period, and cannot change. Pending entries are newer than the grace period and are subject to updates
	EntryStatus CreditLedgerEntryEntryStatusEnum `json:"entry_status"`
	EntryType   CreditLedgerEntryEntryTypeEnum   `json:"entry_type"`
	EventID     *string                          `json:"event_id,omitempty"`
	ID          string                           `json:"id"`
	// The position in which this entry appears in the ledger, starting at 0
	LedgerSequenceNumber float64 `json:"ledger_sequence_number"`
	PriceID              *string `json:"price_id,omitempty"`
	StartingBalance      float64 `json:"starting_balance"`
}
