// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// BackfillStatus - The status of the backfill.
type BackfillStatus string

const (
	BackfillStatusPending       BackfillStatus = "pending"
	BackfillStatusReflected     BackfillStatus = "reflected"
	BackfillStatusPendingRevert BackfillStatus = "pending_revert"
	BackfillStatusReverted      BackfillStatus = "reverted"
)

func (e BackfillStatus) ToPointer() *BackfillStatus {
	return &e
}

func (e *BackfillStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "reflected":
		fallthrough
	case "pending_revert":
		fallthrough
	case "reverted":
		*e = BackfillStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BackfillStatus: %v", v)
	}
}

// Backfill - A backfill represents an update to historical usage data, adding or replacing events in a timeframe.
type Backfill struct {
	// If in the future, the time at which the backfill will automatically close. If in the past, the time at which the backfill was closed.
	CloseTime time.Time `json:"close_time"`
	CreatedAt time.Time `json:"created_at"`
	// The customer ID this backfill is scoped to. If null, this backfill is not scoped to a single customer.
	CustomerID *string `json:"customer_id,omitempty"`
	ID         string  `json:"id"`
	// The time at which this backfill was reverted.
	RevertedAt *time.Time `json:"reverted_at,omitempty"`
	// The status of the backfill.
	Status         BackfillStatus `json:"status"`
	TimeframeEnd   time.Time      `json:"timeframe_end"`
	TimeframeStart time.Time      `json:"timeframe_start"`
}
