// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// CreditNoteCustomer - The Customer who is receiving this credit note.
type CreditNoteCustomer struct {
	ExternalCustomerID string `json:"external_customer_id"`
	ID                 string `json:"id"`
}

// CreditNoteReason - A reason for this credit note, which can be one of "Duplicate", "Fraudulent", "Order change", "Product unsatisfactory"
type CreditNoteReason string

const (
	CreditNoteReasonDuplicate             CreditNoteReason = "Duplicate"
	CreditNoteReasonFraudulent            CreditNoteReason = "Fraudulent"
	CreditNoteReasonOrderChange           CreditNoteReason = "Order change"
	CreditNoteReasonProductUnsatisfactory CreditNoteReason = "Product unsatisfactory"
)

func (e CreditNoteReason) ToPointer() *CreditNoteReason {
	return &e
}

func (e *CreditNoteReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Duplicate":
		fallthrough
	case "Fraudulent":
		fallthrough
	case "Order change":
		fallthrough
	case "Product unsatisfactory":
		*e = CreditNoteReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreditNoteReason: %v", v)
	}
}

// CreditNoteType - Describing if this is an `adjustment` or a `refund`
type CreditNoteType string

const (
	CreditNoteTypeRefund     CreditNoteType = "refund"
	CreditNoteTypeAdjustment CreditNoteType = "adjustment"
)

func (e CreditNoteType) ToPointer() *CreditNoteType {
	return &e
}

func (e *CreditNoteType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "refund":
		fallthrough
	case "adjustment":
		*e = CreditNoteType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreditNoteType: %v", v)
	}
}

type CreditNote struct {
	// The creation time of the resource in Orb.
	CreatedAt time.Time `json:"created_at"`
	// The unique identifier for credit notes.
	CreditNoteNumber string `json:"credit_note_number"`
	// A URL to a PDF version of this credit note.
	CreditNotePdf string `json:"credit_note_pdf"`
	// The Customer who is receiving this credit note.
	Customer CreditNoteCustomer `json:"customer"`
	// Any discounts applied on the original invoice.
	Discounts []Discount `json:"discounts"`
	// The unique id of this credit note.
	ID string `json:"id"`
	// The Invoice resource that this credit note is applied to.
	InvoiceID string `json:"invoice_id"`
	// All of the line items associated with this credit note
	LineItems []CreditNoteLineItem `json:"line_items"`
	// An optional memo supplied on the credit note.
	Memo string `json:"memo"`
	// Any credited amount from the applied minimum on the invoice.
	MinimumAmountRefunded string `json:"minimum_amount_refunded"`
	// A reason for this credit note, which can be one of "Duplicate", "Fraudulent", "Order change", "Product unsatisfactory"
	Reason CreditNoteReason `json:"reason"`
	// The total prior to any creditable invoice-level discounts or minimums
	Subtotal string `json:"subtotal"`
	// The total including creditable invoice-level discounts or minimums, and tax
	Total string `json:"total"`
	// Describing if this is an `adjustment` or a `refund`
	Type CreditNoteType `json:"type"`
	// The time when the credit note was voided in Orb, if applicable.
	VoidedAt time.Time `json:"voided_at"`
}
