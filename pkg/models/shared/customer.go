// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// CustomerBillingAddress - The customer's billing address; all fields in the address are optional. This address appears on customer invoices.
type CustomerBillingAddress struct {
	City *string `json:"city,omitempty"`
	// Two-letter country code (ISO 3166-1 alpha-2).
	Country *string `json:"country,omitempty"`
	Line1   *string `json:"line1,omitempty"`
	Line2   *string `json:"line2,omitempty"`
	// ZIP or postal code
	PostalCode *string `json:"postal_code,omitempty"`
	State      *string `json:"state,omitempty"`
}

// CustomerPaymentProviderEnum - The external payments or invoicing solution connected to this customer.
type CustomerPaymentProviderEnum string

const (
	CustomerPaymentProviderEnumStripe        CustomerPaymentProviderEnum = "stripe"
	CustomerPaymentProviderEnumQuickbooks    CustomerPaymentProviderEnum = "quickbooks"
	CustomerPaymentProviderEnumBillCom       CustomerPaymentProviderEnum = "bill.com"
	CustomerPaymentProviderEnumStripeCharge  CustomerPaymentProviderEnum = "stripe_charge"
	CustomerPaymentProviderEnumStripeInvoice CustomerPaymentProviderEnum = "stripe_invoice"
	CustomerPaymentProviderEnumNull          CustomerPaymentProviderEnum = "null"
)

func (e *CustomerPaymentProviderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "stripe":
		fallthrough
	case "quickbooks":
		fallthrough
	case "bill.com":
		fallthrough
	case "stripe_charge":
		fallthrough
	case "stripe_invoice":
		fallthrough
	case "null":
		*e = CustomerPaymentProviderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CustomerPaymentProviderEnum: %s", s)
	}
}

// CustomerShippingAddress - The customer's shipping address; all fields in the address are optional. Note that downstream tax calculations are based on the shipping address.
type CustomerShippingAddress struct {
	City *string `json:"city,omitempty"`
	// Two-letter country code (ISO 3166-1 alpha-2).
	Country *string `json:"country,omitempty"`
	Line1   *string `json:"line1,omitempty"`
	Line2   *string `json:"line2,omitempty"`
	// ZIP or postal code
	PostalCode *string `json:"postal_code,omitempty"`
	State      *string `json:"state,omitempty"`
}

// Customer - A customer is a buyer of your products, and the other party to the billing relationship.
//
// In Orb, customers are assigned system generated identifiers automatically, but it's often desirable to have these match existing identifiers in your system. To avoid having to denormalize Orb ID information, you can pass in an `external_customer_id` with your own identifier. See [Customer ID Aliases](../docs/Customer-ID-Aliases.md) for further information about how these aliases work in Orb.
//
// In addition to having an identifier in your system, a customer may exist in a payment provider solution like Stripe. Use the `payment_provider_id` and the `payment_provider` enum field to express this mapping.
//
// A customer also has a timezone (from the standard [IANA timezone database](https://www.iana.org/time-zones)), which defaults to your account's timezone. See [Timezone localization](../docs/Timezone-localization.md) for information on what this timezone parameter influences within Orb.
type Customer struct {
	// The customer's current balance in their currency.
	Balance string `json:"balance"`
	// The customer's billing address; all fields in the address are optional. This address appears on customer invoices.
	BillingAddress *CustomerBillingAddress `json:"billing_address,omitempty"`
	CreatedAt      time.Time               `json:"created_at"`
	// An ISO 4217 currency string used for the customer's invoices and balance.
	Currency string `json:"currency"`
	// A valid customer email, to be used for notifications. When Orb triggers payment through a payment gateway, this email will be used for any automatically issued receipts.
	Email string `json:"email"`
	// An optional user-defined ID for this customer resource, used throughout the system as an alias for this Customer. Use this field to identify a customer by an existing identifier in your system.
	ExternalCustomerID *string `json:"external_customer_id,omitempty"`
	// The full name of the customer
	ID   string `json:"id"`
	Name string `json:"name"`
	// The external payments or invoicing solution connected to this customer.
	PaymentProvider CustomerPaymentProviderEnum `json:"payment_provider"`
	// The ID of this customer in an external payments solution, such as Stripe. This is used for creating charges or invoices in the external system via Orb.
	PaymentProviderID string `json:"payment_provider_id"`
	// The customer's shipping address; all fields in the address are optional. Note that downstream tax calculations are based on the shipping address.
	ShippingAddress *CustomerShippingAddress `json:"shipping_address,omitempty"`
	// A timezone identifier from the IANA timezone database, such as "America/Los_Angeles". This defaults to your account's timezone if not set. This cannot be changed after customer creation.
	Timezone string `json:"timezone"`
}
