// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/orb-go/pkg/models/shared"
	"net/http"
)

// PutCustomersExternalCustomerIDExternalCustomerIDRequestBodyBillingAddress - The customer's billing address; all fields in the address are optional. This address appears on customer invoices.
type PutCustomersExternalCustomerIDExternalCustomerIDRequestBodyBillingAddress struct {
	City *string `json:"city,omitempty"`
	// Two-letter country code (ISO 3166-1 alpha-2).
	Country *string `json:"country,omitempty"`
	Line1   *string `json:"line1,omitempty"`
	Line2   *string `json:"line2,omitempty"`
	// ZIP or postal code
	PostalCode *string `json:"postal_code,omitempty"`
	State      *string `json:"state,omitempty"`
}

// PutCustomersExternalCustomerIDExternalCustomerIDRequestBodyPaymentProviderEnum - This is used for creating charges or invoices in an external system via Orb. When not in test mode:
// - the connection must first be configured in the Orb webapp.
// - if the provider is an invoicing provider (`stripe_invoice`, `quickbooks`, `bill.com`), any product mappings must first be configured with the Orb team.
type PutCustomersExternalCustomerIDExternalCustomerIDRequestBodyPaymentProviderEnum string

const (
	PutCustomersExternalCustomerIDExternalCustomerIDRequestBodyPaymentProviderEnumQuickbooks    PutCustomersExternalCustomerIDExternalCustomerIDRequestBodyPaymentProviderEnum = "quickbooks"
	PutCustomersExternalCustomerIDExternalCustomerIDRequestBodyPaymentProviderEnumStripeCharge  PutCustomersExternalCustomerIDExternalCustomerIDRequestBodyPaymentProviderEnum = "stripe_charge"
	PutCustomersExternalCustomerIDExternalCustomerIDRequestBodyPaymentProviderEnumStripeInvoice PutCustomersExternalCustomerIDExternalCustomerIDRequestBodyPaymentProviderEnum = "stripe_invoice"
	PutCustomersExternalCustomerIDExternalCustomerIDRequestBodyPaymentProviderEnumBillCom       PutCustomersExternalCustomerIDExternalCustomerIDRequestBodyPaymentProviderEnum = "bill.com"
	PutCustomersExternalCustomerIDExternalCustomerIDRequestBodyPaymentProviderEnumNull          PutCustomersExternalCustomerIDExternalCustomerIDRequestBodyPaymentProviderEnum = "null"
)

func (e *PutCustomersExternalCustomerIDExternalCustomerIDRequestBodyPaymentProviderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "quickbooks":
		fallthrough
	case "stripe_charge":
		fallthrough
	case "stripe_invoice":
		fallthrough
	case "bill.com":
		fallthrough
	case "null":
		*e = PutCustomersExternalCustomerIDExternalCustomerIDRequestBodyPaymentProviderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutCustomersExternalCustomerIDExternalCustomerIDRequestBodyPaymentProviderEnum: %s", s)
	}
}

// PutCustomersExternalCustomerIDExternalCustomerIDRequestBodyShippingAddress - The customer's shipping address; all fields in the address are optional. Note that downstream tax calculations are based on the shipping address.
type PutCustomersExternalCustomerIDExternalCustomerIDRequestBodyShippingAddress struct {
	City *string `json:"city,omitempty"`
	// Two-letter country code (ISO 3166-1 alpha-2).
	Country *string `json:"country,omitempty"`
	Line1   *string `json:"line1,omitempty"`
	Line2   *string `json:"line2,omitempty"`
	// ZIP or postal code
	PostalCode *string `json:"postal_code,omitempty"`
	State      *string `json:"state,omitempty"`
}

type PutCustomersExternalCustomerIDExternalCustomerIDRequestBody struct {
	// The customer's billing address; all fields in the address are optional. This address appears on customer invoices.
	BillingAddress *PutCustomersExternalCustomerIDExternalCustomerIDRequestBodyBillingAddress `json:"billing_address,omitempty"`
	Email          *string                                                                    `json:"email,omitempty"`
	Name           *string                                                                    `json:"name,omitempty"`
	// This is used for creating charges or invoices in an external system via Orb. When not in test mode:
	// - the connection must first be configured in the Orb webapp.
	// - if the provider is an invoicing provider (`stripe_invoice`, `quickbooks`, `bill.com`), any product mappings must first be configured with the Orb team.
	PaymentProvider *PutCustomersExternalCustomerIDExternalCustomerIDRequestBodyPaymentProviderEnum `json:"payment_provider,omitempty"`
	// The ID of this customer in an external payments solution, such as Stripe. This is used for creating charges or invoices in the external system via Orb.
	PaymentProviderID *string `json:"payment_provider_id,omitempty"`
	// The customer's shipping address; all fields in the address are optional. Note that downstream tax calculations are based on the shipping address.
	ShippingAddress *PutCustomersExternalCustomerIDExternalCustomerIDRequestBodyShippingAddress `json:"shipping_address,omitempty"`
}

type PutCustomersExternalCustomerIDExternalCustomerIDRequest struct {
	RequestBody        *PutCustomersExternalCustomerIDExternalCustomerIDRequestBody `request:"mediaType=application/json"`
	ExternalCustomerID string                                                       `pathParam:"style=simple,explode=false,name=external_customer_id"`
}

type PutCustomersExternalCustomerIDExternalCustomerIDResponse struct {
	ContentType string
	// OK
	Customer    *shared.Customer
	StatusCode  int
	RawResponse *http.Response
}
