// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"time"
)

// AmendEventRequestBodyProperties - A dictionary of custom properties. Values in this dictionary must be numeric, boolean, or strings. Nested dictionaries are disallowed.
type AmendEventRequestBodyProperties struct {
}

type AmendEventRequestBody struct {
	// The Orb Customer identifier
	CustomerID *string `json:"customer_id,omitempty"`
	// A name to meaningfully identify the action or event type.
	EventName string `json:"event_name"`
	// An alias for the Orb customer, whose mapping is specified when creating the customer
	ExternalCustomerID *string `json:"external_customer_id,omitempty"`
	// A dictionary of custom properties. Values in this dictionary must be numeric, boolean, or strings. Nested dictionaries are disallowed.
	Properties AmendEventRequestBodyProperties `json:"properties"`
	// An ISO 8601 format date with no timezone offset (i.e. UTC). This should represent the time that usage was recorded, and is particularly important to attribute usage to a given billing period.
	Timestamp time.Time `json:"timestamp"`
}

type AmendEventRequest struct {
	RequestBody *AmendEventRequestBody `request:"mediaType=application/json"`
	// Identical to the `idempotency_key` provided on event ingestion. Uniquely identifies an event in the system.
	EventID string `pathParam:"style=simple,explode=false,name=event_id"`
}

// AmendEvent400ApplicationJSON - Bad Request
type AmendEvent400ApplicationJSON struct {
	// HTTP Code
	Status *int64 `json:"status,omitempty"`
	// Error message
	Title *string `json:"title,omitempty"`
	Type  *string `json:"type,omitempty"`
	// An array of strings corresponding to the validation failures
	ValidationErrors []string `json:"validation_errors,omitempty"`
}

// AmendEvent200ApplicationJSON - OK
type AmendEvent200ApplicationJSON struct {
	// event_id of the amended event, if successfully ingested
	Amended *string `json:"amended,omitempty"`
}

type AmendEventResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	AmendEvent200ApplicationJSONObject *AmendEvent200ApplicationJSON
	// Bad Request
	AmendEvent400ApplicationJSONObject *AmendEvent400ApplicationJSON
}
