// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"Orb/pkg/models/shared"
	"Orb/pkg/types"
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateFixedFeeQuantityRequestBodyChangeOption - Determines when the change takes effect. Note that if `effective_date` is specified, this defautls to `effective_date`. Otherwise, this defaults to `immediate` unless it's explicitly set to `upcoming_invoice.
type UpdateFixedFeeQuantityRequestBodyChangeOption string

const (
	UpdateFixedFeeQuantityRequestBodyChangeOptionImmediate       UpdateFixedFeeQuantityRequestBodyChangeOption = "immediate"
	UpdateFixedFeeQuantityRequestBodyChangeOptionUpcomingInvoice UpdateFixedFeeQuantityRequestBodyChangeOption = "upcoming_invoice"
	UpdateFixedFeeQuantityRequestBodyChangeOptionEffectiveDate   UpdateFixedFeeQuantityRequestBodyChangeOption = "effective_date"
)

func (e UpdateFixedFeeQuantityRequestBodyChangeOption) ToPointer() *UpdateFixedFeeQuantityRequestBodyChangeOption {
	return &e
}

func (e *UpdateFixedFeeQuantityRequestBodyChangeOption) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "immediate":
		fallthrough
	case "upcoming_invoice":
		fallthrough
	case "effective_date":
		*e = UpdateFixedFeeQuantityRequestBodyChangeOption(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFixedFeeQuantityRequestBodyChangeOption: %v", v)
	}
}

type UpdateFixedFeeQuantityRequestBody struct {
	// Determines when the change takes effect. Note that if `effective_date` is specified, this defautls to `effective_date`. Otherwise, this defaults to `immediate` unless it's explicitly set to `upcoming_invoice.
	ChangeOption *UpdateFixedFeeQuantityRequestBodyChangeOption `json:"change_option,omitempty"`
	// The date that the quantity change should take effect, localized to the customer's timezone. If this parameter is not passed in, the quantity change is effective immediately.
	EffectiveDate *types.Date `json:"effective_date,omitempty"`
	// Price for which the quantity should be updated. Must be a fixed fee.
	PriceID  string  `json:"price_id"`
	Quantity float64 `json:"quantity"`
}

type UpdateFixedFeeQuantityRequest struct {
	RequestBody    *UpdateFixedFeeQuantityRequestBody `request:"mediaType=application/json"`
	SubscriptionID string                             `pathParam:"style=simple,explode=false,name=subscription_id"`
}

type UpdateFixedFeeQuantityResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	Subscription *shared.Subscription
}
