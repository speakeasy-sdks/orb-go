// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"Orb/pkg/models/shared"
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// CancelSubscriptionRequestBodyCancelOption - Determines the timing of subscription cancellation
type CancelSubscriptionRequestBodyCancelOption string

const (
	CancelSubscriptionRequestBodyCancelOptionImmediate             CancelSubscriptionRequestBodyCancelOption = "immediate"
	CancelSubscriptionRequestBodyCancelOptionEndOfSubscriptionTerm CancelSubscriptionRequestBodyCancelOption = "end_of_subscription_term"
	CancelSubscriptionRequestBodyCancelOptionRequestedDate         CancelSubscriptionRequestBodyCancelOption = "requested_date"
)

func (e CancelSubscriptionRequestBodyCancelOption) ToPointer() *CancelSubscriptionRequestBodyCancelOption {
	return &e
}

func (e *CancelSubscriptionRequestBodyCancelOption) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "immediate":
		fallthrough
	case "end_of_subscription_term":
		fallthrough
	case "requested_date":
		*e = CancelSubscriptionRequestBodyCancelOption(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelSubscriptionRequestBodyCancelOption: %v", v)
	}
}

type CancelSubscriptionRequestBody struct {
	// Determines the timing of subscription cancellation
	CancelOption CancelSubscriptionRequestBodyCancelOption `json:"cancel_option"`
	// The date that the cancellation should take effect. This parameter can only be passed if the `cancel_option` is `requested_date`.
	CancellationDate *time.Time `json:"cancellation_date,omitempty"`
}

type CancelSubscriptionRequest struct {
	RequestBody    *CancelSubscriptionRequestBody `request:"mediaType=application/json"`
	SubscriptionID string                         `pathParam:"style=simple,explode=false,name=subscription_id"`
}

type CancelSubscriptionResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	Subscription *shared.Subscription
}
