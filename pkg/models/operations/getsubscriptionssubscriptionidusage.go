// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// GetSubscriptionsSubscriptionIDUsageGranularity - This determines the windowing of usage reporting.
type GetSubscriptionsSubscriptionIDUsageGranularity string

const (
	GetSubscriptionsSubscriptionIDUsageGranularityDay GetSubscriptionsSubscriptionIDUsageGranularity = "day"
)

func (e GetSubscriptionsSubscriptionIDUsageGranularity) ToPointer() *GetSubscriptionsSubscriptionIDUsageGranularity {
	return &e
}

func (e *GetSubscriptionsSubscriptionIDUsageGranularity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "day":
		*e = GetSubscriptionsSubscriptionIDUsageGranularity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSubscriptionsSubscriptionIDUsageGranularity: %v", v)
	}
}

type GetSubscriptionsSubscriptionIDUsageRequest struct {
	// When specified in conjunction with `group_by`, this parameter filters usage to a single billable metric. Note that both `group_by` and `billable_metric_id` must be specific together.
	BillableMetricID *string `queryParam:"style=form,explode=true,name=billable_metric_id"`
	// This determines the windowing of usage reporting.
	Granularity *GetSubscriptionsSubscriptionIDUsageGranularity `queryParam:"style=form,explode=true,name=granularity"`
	// When specified in conjunction with `billable_metric_id`, this parameter groups by the key provided. Note that both `group_by` and `billable_metric_id` must be specific together.
	GroupBy        *string `queryParam:"style=form,explode=true,name=group_by"`
	SubscriptionID string  `pathParam:"style=simple,explode=false,name=subscription_id"`
	// Usage returned is _exclusive_ of `timeframe_end`
	TimeframeEnd *time.Time `queryParam:"style=form,explode=true,name=timeframe_end"`
	// Usage returned is _inclusive_ of `timeframe_start`
	TimeframeStart *time.Time `queryParam:"style=form,explode=true,name=timeframe_start"`
}

type GetSubscriptionsSubscriptionIDUsageResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
