// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"Orb/pkg/models/shared"
	"net/http"
	"time"
)

type CreateBackfillRequestBody struct {
	// The time at which no more events will be accepted for this backfill. The backfill will automatically begin reflecting throughout Orb at the close time. If not specified, it will default to 1 day after the creation of the backfill.
	CloseTime *time.Time `json:"close_time,omitempty"`
	// The ID of the customer to which this backfill is scoped.
	CustomerID *string `json:"customer_id,omitempty"`
	// The external customer ID of the customer to which this backfill is scoped.
	ExternalCustomerID *string `json:"external_customer_id,omitempty"`
	// If true, replaces all existing events in the timeframe with the newly ingested events. If false, adds the newly ingested events to the existing events.
	ReplaceExistingEvents bool `json:"replace_existing_events"`
	// The (exclusive) end of the usage timeframe affected by this backfill.
	TimeframeEnd time.Time `json:"timeframe_end"`
	// The (inclusive) end of the usage timeframe affected by this backfill.
	TimeframeStart time.Time `json:"timeframe_start"`
}

type CreateBackfillResponse struct {
	// OK
	Backfill    *shared.Backfill
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
