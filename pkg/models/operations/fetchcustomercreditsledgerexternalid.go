// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"Orb/pkg/models/shared"
	"encoding/json"
	"fmt"
	"net/http"
)

// FetchCustomerCreditsLedgerExternalIDEntryStatus - Filters to a single status of ledger entry
type FetchCustomerCreditsLedgerExternalIDEntryStatus string

const (
	FetchCustomerCreditsLedgerExternalIDEntryStatusCommitted FetchCustomerCreditsLedgerExternalIDEntryStatus = "committed"
	FetchCustomerCreditsLedgerExternalIDEntryStatusPending   FetchCustomerCreditsLedgerExternalIDEntryStatus = "pending"
)

func (e FetchCustomerCreditsLedgerExternalIDEntryStatus) ToPointer() *FetchCustomerCreditsLedgerExternalIDEntryStatus {
	return &e
}

func (e *FetchCustomerCreditsLedgerExternalIDEntryStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "committed":
		fallthrough
	case "pending":
		*e = FetchCustomerCreditsLedgerExternalIDEntryStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FetchCustomerCreditsLedgerExternalIDEntryStatus: %v", v)
	}
}

// FetchCustomerCreditsLedgerExternalIDEntryType - Filter to a single type of ledger entry
type FetchCustomerCreditsLedgerExternalIDEntryType string

const (
	FetchCustomerCreditsLedgerExternalIDEntryTypeIncrement         FetchCustomerCreditsLedgerExternalIDEntryType = "increment"
	FetchCustomerCreditsLedgerExternalIDEntryTypeDecrement         FetchCustomerCreditsLedgerExternalIDEntryType = "decrement"
	FetchCustomerCreditsLedgerExternalIDEntryTypeExpirationChange  FetchCustomerCreditsLedgerExternalIDEntryType = "expiration_change"
	FetchCustomerCreditsLedgerExternalIDEntryTypeCreditBlockExpiry FetchCustomerCreditsLedgerExternalIDEntryType = "credit_block_expiry"
)

func (e FetchCustomerCreditsLedgerExternalIDEntryType) ToPointer() *FetchCustomerCreditsLedgerExternalIDEntryType {
	return &e
}

func (e *FetchCustomerCreditsLedgerExternalIDEntryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "increment":
		fallthrough
	case "decrement":
		fallthrough
	case "expiration_change":
		fallthrough
	case "credit_block_expiry":
		*e = FetchCustomerCreditsLedgerExternalIDEntryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FetchCustomerCreditsLedgerExternalIDEntryType: %v", v)
	}
}

type FetchCustomerCreditsLedgerExternalIDRequest struct {
	// Filters to a single status of ledger entry
	EntryStatus *FetchCustomerCreditsLedgerExternalIDEntryStatus `queryParam:"style=form,explode=true,name=entry_status"`
	// Filter to a single type of ledger entry
	EntryType          *FetchCustomerCreditsLedgerExternalIDEntryType `queryParam:"style=form,explode=true,name=entry_type"`
	ExternalCustomerID string                                         `pathParam:"style=simple,explode=false,name=external_customer_id"`
	// Filter to ledger entries that affect at least this amount
	MinimumAmount *float64 `queryParam:"style=form,explode=true,name=minimum_amount"`
}

type FetchCustomerCreditsLedgerExternalID200ApplicationJSONPaginationMetadata struct {
	HasMore    bool   `json:"has_more"`
	NextCursor string `json:"next_cursor"`
}

// FetchCustomerCreditsLedgerExternalID200ApplicationJSON - OK
type FetchCustomerCreditsLedgerExternalID200ApplicationJSON struct {
	Data               []shared.CreditLedgerEntry                                               `json:"data"`
	PaginationMetadata FetchCustomerCreditsLedgerExternalID200ApplicationJSONPaginationMetadata `json:"pagination_metadata"`
}

type FetchCustomerCreditsLedgerExternalIDResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	FetchCustomerCreditsLedgerExternalID200ApplicationJSONObject *FetchCustomerCreditsLedgerExternalID200ApplicationJSON
}
