// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// IngestRequestBodyEventsProperties - A dictionary of custom properties. Values in this dictionary must be numeric, boolean, or strings. Nested dictionaries are disallowed.
type IngestRequestBodyEventsProperties struct {
}

type IngestRequestBodyEvents struct {
	// The Orb Customer identifier
	CustomerID *string `json:"customer_id,omitempty"`
	// A name to meaningfully identify the action or event type.
	EventName string `json:"event_name"`
	// An alias for the Orb customer, whose mapping is specified when creating the customer
	ExternalCustomerID *string `json:"external_customer_id,omitempty"`
	// A unique value, generated by the client, that is used to de-duplicate events. Exactly one event with a given idempotency key will be ingested, which allows for safe request retries.
	IdempotencyKey string `json:"idempotency_key"`
	// A dictionary of custom properties. Values in this dictionary must be numeric, boolean, or strings. Nested dictionaries are disallowed.
	Properties IngestRequestBodyEventsProperties `json:"properties"`
	// An ISO 8601 format date with no timezone offset (i.e. UTC). This should represent the time that usage was recorded, and is particularly important to attribute usage to a given billing period.
	Timestamp string `json:"timestamp"`
}

type IngestRequestBody struct {
	Events []IngestRequestBodyEvents `json:"events"`
}

// IngestDebug - Flag to enable additional debug information in the endpoint response
type IngestDebug string

const (
	IngestDebugTrue  IngestDebug = "true"
	IngestDebugFalse IngestDebug = "false"
)

func (e IngestDebug) ToPointer() *IngestDebug {
	return &e
}

func (e *IngestDebug) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "true":
		fallthrough
	case "false":
		*e = IngestDebug(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IngestDebug: %v", v)
	}
}

type IngestRequest struct {
	RequestBody *IngestRequestBody `request:"mediaType=application/json"`
	// If this ingestion request is part of a backfill, this parameter ties the ingested events to the backfill
	BackfillID *string `queryParam:"style=form,explode=true,name=backfill_id"`
	// Flag to enable additional debug information in the endpoint response
	Debug *IngestDebug `queryParam:"style=form,explode=true,name=debug"`
}

// Ingest400ApplicationJSONDebug - Optional debug information (only present when debug=true is passed to the endpoint). Contains ingested and duplicate event idempotency keys.
type Ingest400ApplicationJSONDebug struct {
	Duplicate []string `json:"duplicate,omitempty"`
	Ingested  []string `json:"ingested,omitempty"`
}

type Ingest400ApplicationJSONValidationFailed struct {
	IdempotencyKey *string `json:"idempotency_key,omitempty"`
	// An array of objects corresponding to validation failures for each idempotency_key.
	ValidationErrors []string `json:"validation_errors,omitempty"`
}

// Ingest400ApplicationJSON - Bad Request
type Ingest400ApplicationJSON struct {
	// Optional debug information (only present when debug=true is passed to the endpoint). Contains ingested and duplicate event idempotency keys.
	Debug *Ingest400ApplicationJSONDebug `json:"debug,omitempty"`
	// Contains all failing validation events. In the case of a 400, there will be at least one entry in this array.
	ValidationFailed []Ingest400ApplicationJSONValidationFailed `json:"validation_failed"`
}

// Ingest200ApplicationJSONDebug - Optional debug information (only present when debug=true is passed to the endpoint). Contains ingested and duplicate event idempotency keys.
type Ingest200ApplicationJSONDebug struct {
	Duplicate []string `json:"duplicate,omitempty"`
	Ingested  []string `json:"ingested,omitempty"`
}

type Ingest200ApplicationJSONValidationFailedValidationErrors struct {
}

type Ingest200ApplicationJSONValidationFailed struct {
	// The passed idempotency_key corresponding to the validation_errors
	IdempotencyKey *string `json:"idempotency_key,omitempty"`
	// An array of objects corresponding to validation failures for each idempotency_key.
	ValidationErrors []Ingest200ApplicationJSONValidationFailedValidationErrors `json:"validation_errors,omitempty"`
}

// Ingest200ApplicationJSON - OK
type Ingest200ApplicationJSON struct {
	// Optional debug information (only present when debug=true is passed to the endpoint). Contains ingested and duplicate event idempotency keys.
	Debug *Ingest200ApplicationJSONDebug `json:"debug,omitempty"`
	// Contains all failing validation events. In the case of a 200, this array will always be empty. This field will always be present.
	ValidationFailed []Ingest200ApplicationJSONValidationFailed `json:"validation_failed"`
}

type IngestResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	Ingest200ApplicationJSONObject *Ingest200ApplicationJSON
	// Bad Request
	Ingest400ApplicationJSONObject *Ingest400ApplicationJSON
}
